#include <bits/stdc++.h>
using namespace std;
#define ll long long
#define pb push_back

struct node{
    int data;
    struct node* left;
    struct node* right;
    
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
    
};


int count_leaves(struct node*root){
    if(root==NULL) return 0;
    return count_leaves(root->left) + count_leaves(root->right) + 1;
}

int depth(struct node*root){
	if(root==NULL) return 0;
	int l=depth(root->right);
	int r=depth(root->left);
	return max(r,l)+1;
}


bool is_father(struct node*a,struct node*b){
	if((a->left==b)||(a->right==b)) return true;
	return false;
}

bool CheckIfNodesAreSiblings(node* root,struct node*a,struct node*b)
{
    if (!root)return false;
 
    if (root->left && root->right) {
        int left = root->left->data;
        int right = root->right->data;
 
        if (left == a->data && right == b->data)
            return true;
        else if (left == b->data && right == a->data)
            return true;
    }
 
    if (root->left)
        if (CheckIfNodesAreSiblings(root->left, a,b))
            return true;
 
   
    if (root->right)
        if (CheckIfNodesAreSiblings(root->right, a,b))
            return true;
    return false;
}

int main()
{
    struct node* root=new node(1);
    root->right=new node(3);
    root->left=new node(2);
    root->left->left=new node(4);
    root->left->right=new node(5);
    root->right->left=new node(6);
    root->right->right=new node(7);
    cout<<count_leaves(root)<<" ";
    cout<<depth(root)<<" ";
    cout<<is_father(root,root->left)<<" ";
    cout<<CheckIfNodesAreSiblings(root,root->left,root->right)<<" ";
}


#include<bits/stdc++.h>
using namespace std;
int tree[10];
int root(int key) {
    if (tree[0] != '\0') cout << "Tree already had root";
    else tree[0] = key;
    return 0;
}

int x=0;
int y=0;

int set_left(int key, int parent) {
    if (tree[parent] == '\0') cout << "no parent found";
    else tree[(parent * 2) + 1] = key,y++;
    return 0;
}



int set_right(int key, int parent) {
    if (tree[parent] == '\0') cout << "no parent found";
    else tree[(parent * 2) + 2] = key,x++;
    return 0;
}

int count(){
    int c=0;
    for(auto i:tree){
        if(i!=0) c++;
    }
    return c;
}

int depth(){
    int ind=0;
    for(int i=0;i<10;i++){
        if(tree[i]!=0) ind=i;
    }
    return log2(ind+1)+1;
}

bool is_father(int a,int b){
    if((b==(a*2+1))||(b==(a*2))) return true;
    return false;
}
bool is_sibling(int a,int b){
    return log2(a+1)==log2(b+1);
}


int main() {
    root(8);
    set_left(6,0);
    set_right(4, 0);
    set_left(3, 1);
    set_right(4, 1);
    set_right(7, 2);
    cout<<count()<<endl;
    cout<<depth()<<endl;
    cout<<is_father(1,2)<<endl;
    cout<<is_sibling(1,2);
    return 0;
}




#include <bits/stdc++.h>
using namespace std;
#define pb push_back
#define ll long long

struct node{
    int data;
    node *left;
    node * right;
    
    node(int val){
        data=val;
        left=NULL;
        right=NULL;
    }
};

node* insertbst(node* root,int val){
    node* temp= new node(val);
    if(root==NULL) return temp;
    
    if(val<root->data){
        root->left=insertbst(root->left,val);
    }
    else root->right=insertbst(root->right,val);
    return root;
}

void inorder(node* root){
    if(root==NULL) return;
    
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

void preorder(node* root){
    if(root==NULL) return;
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

node* search(node* root,int val){
    if(root==NULL) return NULL;
    if(root->data==val) return root;
    if(root->data>val) search(root->left,val);
    else search(root->right,val);
}

node* successor(node* root){
    node* curr=root;
    while(curr!=NULL and curr->left!=NULL) curr=curr->left;
    return curr;
}

node* delnode(node* root,int val){
    if(val<root->data){
        root->left=delnode(root->left,val);
    }
    else if(val>root->data){
        root->right=delnode(root->right,val);
    }
    else{
        if(root->left==NULL){
            node* temp=root->right;
            free(root);
            return temp;
        }
        else if(root->right==NULL){
            node* temp=root->left;
            free(root);
            return temp;
        }
        
        node* temp=successor(root->right);
        root->data=temp->data;
        root->right=delnode(root->right,temp->data);
    }
    return root;
}

int main()
{
    node* root=NULL;
    root=insertbst(root,5);
    insertbst(root,1);
    insertbst(root,3);
    insertbst(root,4);
    insertbst(root,2);
    insertbst(root,7);
    inorder(root);
    cout<<endl;
    delnode(root,2);
    inorder(root);
    cout<<endl;

}

